
public class Ex901 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
/*
 	1. 객체지향과 절차적 프로그래밍 방식
 	- 객체지향 프로그래밍 언어의 원조는 시뮬라 라는 프로그래밍 언어로서 클래스라는 개념을 처음으로 도입
 	- 객체지향 프로그래밍은 클래스를 생성하고 클래스로부터 객체를 만들어 객체 간의 상호 작용을 이용하여
 	  주어진 문제를 해결하는 프로그래밍 방식
 	- C 언어와 같은 절차적 프로그래밍 방식은 데이터를 정의하고, 데이터를 처리하는 절차를 함수로 구현하는 방식
 	- 절차적 프로그래밍이 데이터(변수)와 함수의 프로그램이라면
 	  객체지향 프로그래밍은 데이터(변수)와 함수를 필드와 메소드로 사용한다. 
 	  객체지향 프로그래밍은 필드와 메소드를 하나로 묶은 클래스 단위의 프로그램
 	  클래스 = 필드 + 메소드, 필드, 메소드
 	  
 	2. 객체지향 플호그래밍 주요 특징
 	- 신뢰성이 높은 프로그래밍이 가능
 	- int i; => 접근제어자(privacy, protected, public)
 	 		 	privacy int i;
 	- 코드의 재사용성이 높다.
 	- 코드의 관리가 용이하다.
 	
 	3. 객체 : 현실 세계의 사물이나 개념을 시스템에서 이용하기 위해 현실 세계를 자연스럽게 표현하여 손쉽게
 			 이용할 수 있게 만든 소프트웨어 모델
 	   - 사전적 의미 : 실제로 존재하는 것. Object
 	   - 상태(속성, 특성) : 필드(변수) int version, int color, int model
 	   	 : 객체의 특성을 표현하는 정적인 성질
 	   - 동작(기능, 행동) : 메소드(함수) int powerOn(), int powerOff()
 	   	 : 객체 내부의 일을 처리하거나 객체들간의 서로 영향을 주고 받는 동적인 일을 처리하는 단위
 	   	 
 	4. 객체지향 프로그래밍이 갖고 있는 특징 또는 특성
 	  - 추상화 : 현실 세계의 사실에서 주어진 문제의 중요한 측면을 주목하여 설명하는 방식
 	  		 : 클래스를 이용함으로써 속성과 행동을 함께 추상화의 구조에 넣어 보다 완벽한 추상화를 실현
 	  - 캡슐화(Encapsulation)
 	  	: 객체의 필드, 메소드를 하나로 묶고, 실제 구현 내용을 감추는 것
 	  	: 필드 + 메소드 => 클래스
 	  	: 접근제어자 => privacy, protected, public, default
 	  - 상속 => 재사용성, extends 상위 클래스 이름 
 	  	: 부모가 가지고 있는 재산을 자식에게 물려주는 것
 	  	
 	  	상위 객체 = 필드1 + 메소드1 = 부모 클래스
 	  		|
 	  		| 물려받음
 	  		|
 	  	하위 객체 = 필드1 + 메소드1 + 필드2 + 메소드2 = 자식 클래스
 	  - 다형성(Polymorphism)
 	  	: 같은 타입이지만 실행 결과 다양한 객체를 이용할 수 있는 성질
 	  	: 오버로딩
 	  	  => 메소드 오버로딩, 생성자 오버로딩 
 	  	  
 	5. 객체지향 프로그램 단계
 	- 1단계 : 객체 모델링 단계
 		Ex) 자동차 속도
 		- 속도 : 현재 속도를 지정하고 있으며, 속도가 0이면 멈춘 것이고, 속도가 5km/hr씩 증가 혹은 감소
 		- 방향 : 현재 진행 방향을 지정하고 있으며, 0이면 정면(앞), -90이면 오른쪽, 90이면 왼쪽
 		- 속성(필드) + 기능(메소드)
 		
 		속성 -> 필드			기능 -> 메소드
 		속도 -> speed			속도가 5km/hr 씩 증가/감소 -> speedUp(), speedDown();
 		
 	- 2단계 : 클래스화 단계
 	  클래스 : 객체를 만들기 위한 모형이나 틀
 	  객체 : 클래스의 구체적인 하나의 실례
 	  실생활에서 객체와 클래스의 예 : 붕어빵의 내용물과 반죽 종류
 	  형식 :
 	  
 	  	접근 제어자 class 클래스이름{
 	  		접근 제어자 자료형 필드;
 	  		접근 제어자 자료형 메소드(매개변수 리스트){
 	  		}
 	  	}
 	  
 	  ex) public class Test{
 	  		public int speed;
 	  		public int speedUp(int speed){
 	  			return speed += 5;
 	  		}
 	  		public int speedDown(int speed){
 	  			return speed -= 5;
 	  		}
 	  		
 	  }
 	  
 	- 3단계 : 객체 생성과 사용
 	  형식 :
 	  
 	  Test T		=		new Test();
 	  -------				------------
 	  래퍼런스 변수 선언			인스턴스 생성
 	
 	  T.speed;
 	  T.speedUp();
 	  T.speedDown();
 */
	}

}
